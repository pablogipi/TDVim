#!/bin/bash

#
# Installer script
#

echo "Running Installer"
TARGET=$HOME/TDVim
RELEASETARFILE=release.tgz
PLUGINSTARFILE=plugins.tgz
LOCALVIMCONFIG=$HOME/.vimrc

#
# Install TDVim files {{{
#
mkdir -p $TARGET
mkdir -p $HOME/.vim
echo "TDVim will be installed in " $TARGET
echo "Do you want to install in a different location? [y/N] "
echo
read -t 10 -e res
if  [[ $res =~ ^[yY]$ ]]; then
    while :
    do
        #sleep 1
        echo
        echo "Where do you want to install TDVim?"
        echo "A new folder called TDVim will be created in the designated location"
        read -e -t 10 -r -p "Empty: use default location $TARGET. [qQ] quits installer: " -i $HOME res
        if [[ $? -ne 0 ]]; then
            echo "Read timeout reached, exit ..."
            exit 1
        elif [[ -n $res && -w $res && -d $res ]]; then
            TARGET=$res/TDVim
            mkdir -p $TARGET
            break
        elif [ -z $res ]; then
            mkdir -p $TARGET
            break
        elif [[ $res =~ ^[qQ]$ ]]; then
            exit 1
        else
            echo "The specified location is not writable or is not a valid directory"
        fi
    done
fi
echo "Installing TDVim in $TARGET  ..."
tar xzvf $RELEASETARFILE -C $TARGET
 # }}}

#
# Install TDVim pluging {{{
#
echo
echo "Now you can choose whether or not to install TDVim's plugins or not"
echo "Installed plugins are useful if you dont have access to the internet"
echo "Or you just want to start working inmediately"
echo "They are not fully working repositories from their respective projects."
echo "That means you cant update them automatically. To do so you have to reinstall them."
echo "You can install or reinstall them automatically at any moment after installing TDVim"
echo "If you decide not to install the plugins, the fist time you start VIM after installing RDVim you will be asked to install them."
echo "TDVim is mostly a collection of plugins for VIM, so you will need to install them sooner than later :)"
echo
echo "Do you want to install shipped TDVim's plugins now? [y/N] "
echo
read -t 10 -e res
if  [[ $res =~ ^[yY]$ ]]; then
    if ! [[ -w  $HOME/.vim ]]; then
        mkdir -p $HOME/.vim
    fi
    tar xzvf $PLUGINSTARFILE -C $HOME/.vim
fi

# }}}

#
# Setup user config {{{
#
echo
echo "TDVim needs a minimum setup to automatically starts every time you use VIM"
echo "This setup i sa minimal vimrc and a myvimrc with you personal settings"
echo "If you already have installed TDVim before only TDVim's vimrc will be updated"
echo "If this is the first time you intall TDVim you will be asked to setup TDVim start script"
echo
echo
sleep 2
if ! [[ -r $HOME/.vimrc ]]; then
    if [[ -r $HOME/.vim/vimrc ]]; then
        LOCALVIMCONFIG=$HOME/.vim/vimrc
        echo "-> Vim config found in $HOME/.vim/vimrc"
        echo
    else
        LOCALVIMCONFIG=
    fi
else
    echo "-> Vim config found in $HOME/.vimrc"
    echo
fi
HASTDVIMCONFIG=0
#LOCALVIMCONFIG=$HOME/.vimrc
if [[ -r $LOCALVIMCONFIG ]]; then
    if grep -q TDVIMROOT $LOCALVIMCONFIG; then
        HASTDVIMCONFIG=1
    fi
fi
if [ $HASTDVIMCONFIG -eq 0 ]; then
    echo "-> Couldn't find a correct TDVim vimrc."
    echo "-> TDVim's vimrc will be installed."
    echo
    if [[ -r $LOCALVIMCONFIG ]]; then
        echo "-> Local vimrc found in $LOCALVIMCONFIG"
        echo "-> Your current vimrc can be saved in $HOME/.myvimrc, it will be automatically source by TDVim's vimrc"
        read -e -t 10 -r -p "Do you want to save you vimrc in $HOME/.myvimrc? [Y,n]" res
        if [[ $? -ne 0 || -z res || $res =~ ^[yY]$ ]]; then
            cp -b $LOCALVIMCONFIG $HOME/.myvimrc
        fi
        echo "-> Local vimrc saved as $HOME/.myvimrc"
        echo
    else
        echo "-> Couldn't find local vimrc, myvimrc template will be installed in $HOME/.myvimrc"
        cp -b $TARGET/templates/myvimrc $HOME/.myvimrc 
    fi
    echo "-> myvimrc template updated in $HOME/.myvimrc.template"
    sleep 1
fi

echo "-> Install latest TDVim's vimrc ..."
cp -b $TARGET/templates/vimrc $HOME/.vimrc

# }}}

#
# Setup user TDVIMROOT env var {{{
#
# TODO: env var TDVIMROOT
echo
SHELLCFG=$HOME/.profile
PARENT_COMMAND="$(ps -o comm= $PPID)"
echo "Parent: $PARENT_COMMAND"
echo "SHELL: $0" 
if  [[ $SHELL =~ ^/.*/t?csh$ ]]; then
    # FIXME: test csh
    # Csh
    SHELLCFG=$HOME/.login
    if ! [ -r  $SHELLCFG ]; then
        touch $SHELLCFG
    fi
    if ! grep -q TDVIMROOT $SHELLCFG; then
        echo "#" >> $SHELLCFG 
        echo "# Added by TDVim installer" >> $SHELLCFG 
        echo "setenv TDVIMROOT $TARGET" >> $SHELLCFG 
    else
        sed -i -r -e "s|^(setenv TDVIMROOT=).+$|\1$TARGET|" $SHELLCFG
    fi
    setenv TDVIMROOT $TARGET 

elif  [[ $SHELL =~ ^/.*/zsh$ ]]; then
    # Zsh
    SHELLCFG=$HOME/.zprofile
    if ! [ -r  $SHELLCFG ]; then
        touch $SHELLCFG
    fi
    if ! grep -q TDVIMROOT $SHELLCFG; then
        echo "#" >> $SHELLCFG 
        echo "# Added by TDVim installer" >> $SHELLCFG 
        echo "export TDVIMROOT=$TARGET" >> $SHELLCFG 
    else
        sed -i -r -e "s|^(export TDVIMROOT=).+$|\1$TARGET|" $SHELLCFG
    fi
    export TDVIMROOT=$TARGET 
else
    # Assume Bash
    SHELLCFG=$HOME/.profile
    if ! [ -r  $SHELLCFG ]; then
        touch $SHELLCFG
    fi
    if ! grep -q TDVIMROOT $SHELLCFG; then
        echo "#" >> $SHELLCFG 
        echo "# Added by TDVim installer" >> $SHELLCFG 
        echo "TDVIMROOT=$TARGET" >> $SHELLCFG 
        echo "export TDVIMROOT" >> $SHELLCFG 
    else
    TDVIMROOT=$TARGET 
    export TDVIMROOT
fi

#}}}

echo "-> TDVIMROOT environment variable set to: $TARGET"
echo "-> TDVim environment variable set for your terminal: $SHELLCFG"
echo

# vim: ft=sh ts=8 ff=unix fdm=marker
